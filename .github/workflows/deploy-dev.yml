name: Dev Deployment

on:
  push:
    branches:
      - main 

jobs:
  dev-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli --upgrade --user

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_EKS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: scraper
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Apply Kubernetes manifests
        env:
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/scraper:dev-$GITHUB_SHA|g" deployment/k8s/dev/deployment.yaml
          kubectl apply -f deployment/k8s/dev/deployment.yaml
          kubectl set image -f deployment/k8s/dev/deployment.yaml application=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/scraper:dev-$GITHUB_SHA
          kubectl apply -f deployment/k8s/service.yaml
          kubectl apply -f deployment/k8s/app-hpa.yaml
          kubectl apply -f deployment/k8s/worker-hpa.yaml
          kubectl patch hpa scraper-hpa -p '{"spec":{"minReplicas":1,"maxReplicas":1}}'
          kubectl patch hpa scraper-worker-hpa -p '{"spec":{"minReplicas":1,"maxReplicas":1}}'
